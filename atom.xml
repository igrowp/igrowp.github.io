<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://igrowp.github.io</id>
    <title>grow up together</title>
    <updated>2020-02-07T10:19:57.128Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://igrowp.github.io"/>
    <link rel="self" href="https://igrowp.github.io/atom.xml"/>
    <subtitle>专注成长，共同进步</subtitle>
    <logo>https://igrowp.github.io/images/avatar.png</logo>
    <icon>https://igrowp.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, grow up together</rights>
    <entry>
        <title type="html"><![CDATA[提交信息规范]]></title>
        <id>https://igrowp.github.io/post/ti-jiao-xin-xi-gui-fan</id>
        <link href="https://igrowp.github.io/post/ti-jiao-xin-xi-gui-fan">
        </link>
        <updated>2020-02-07T10:17:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-使用husky-lint-staged">一、使用husky &amp; lint-staged</h2>
<ul>
<li>husky 是控制代码提交的钩子，在代码被提交到Git仓库之前，我们可以在这里做一些预检查或者格式化工作。</li>
<li>lint-staged是一个前端文件过滤的工具（仅仅是文件过滤器），可以对文件系统进行过滤，使得每次提交不必对所有文件进行校验</li>
</ul>
<h3 id="1-安装husky-和-lint-staged">1. 安装husky 和 lint-staged</h3>
<pre><code>npm install husky lint-staged -D
</code></pre>
<h3 id="2-修改-packagejson增加配置">2. 修改 package.json，增加配置：</h3>
<pre><code>&quot;husky&quot;: {
    &quot;hooks&quot;: {
      &quot;pre-commit&quot;: &quot;lint-staged&quot;
    }
  },
  &quot;lint-staged&quot;: {
    &quot;src/**/*.{ts,vue}&quot;: [
      &quot;eslint --fix&quot;, &quot;git add&quot;
    ]
  }
</code></pre>
<p>上面配置，每次它只会在你本地 commit 之前，校验你提交的内容是否符合你本地配置的 eslint规则，如果符合规则，则会提交成功。如果不符合它会自动执行 eslint —fix 尝试帮你自动修复，如果修复成功则会帮你把修复好的代码提交，如果失败，则会提示你错误，让你修好这个错误之后才能允许你提交代码。</p>
<p><strong>拓展</strong>： 除了在package.json中配置，也可以在.lintstagedrc、lint-staged.config.js 文件中，lint-staged 的常用选项除了liners 之外，还有<br>
ignore 、concurrent  等，具体参考文档：</p>
<pre><code>{
  &quot;lint-staged&quot;: {
    &quot;linters&quot;: {
      &quot;*.{js,scss}&quot;: [&quot;some command&quot;, &quot;git add&quot;]
    },
    &quot;ignore&quot;: [&quot;**/dist/*.min.js&quot;]
  }
}
</code></pre>
<h2 id="二-使用-commitlint">二、使用  Commitlint</h2>
<p>Commitlint 可以对代码提交的信息进行规范和校验，方便 团队协作和快速定位问题</p>
<h3 id="1-安装">1. 安装</h3>
<pre><code>npm install --save-dev @commitlint/config-conventional @commitlint/cli

// 生成配置文件commitlint.config.js，当然也可以是 .commitlintrc.js
echo &quot;module.exports = {extends: ['@commitlint/config-conventional']};&quot; &gt; commitlint.config.js

</code></pre>
<h3 id="2-配置">2. 配置</h3>
<p>在husky的配置加入CommitlIint配置，<mark>”commit-msg&quot;: &quot;commitlint -e $HUSKY_GIT_PARAMS”</mark></p>
<pre><code>  husky: {
    hooks: {
		&quot;pre-commit&quot;: &quot;lint-staged&quot;,
      &quot;commit-msg&quot;: &quot;commitlint -e $HUSKY_GIT_PARAMS&quot;
    }
  },
</code></pre>
<h3 id="3-定制提交规范">3. 定制提交规范</h3>
<h4 id="常用的type类别">常用的type类别</h4>
<ul>
<li>build: 影响构建系统或外部依赖关系的更改（示例范围：gulp、broccoli、npm）</li>
<li>ci: 对ci配置文件和脚本的更改（示例范围：Circle、BrowserStack、SauceLabs）</li>
<li>docs: 仅文档更改</li>
<li>feat: 新功能（feature）</li>
<li>fix: 修补bug</li>
<li>perf: 提高性能的代码更改</li>
<li>refactor: 重构（既不修复错误也不添加功能的代码更改）</li>
<li>style: 样式修改，不影响代码含义的更改</li>
<li>test: 增加测试</li>
</ul>
<p>例如：</p>
<pre><code>git commit -m 'feat: 增加 xxx 功能'
git commit -m 'fix: 修复 xxx 功能'
</code></pre>
<h4 id="subject">Subject</h4>
<p>Subject是 commit 目的的简短描述，可以做一些配置，如最大长度限制。</p>
<h4 id="commitlintconfigjs文件配置">commitlint.config.js文件配置</h4>
<p><a href="https://marionebl.github.io/commitlint/#/reference-rules">rule配置说明</a> : rule由name和配置数组组成，如：’name:[0, ‘always’, 72]’，数组中第一位为level，可选0,1,2，0为disable，1为warning，2为error，第二位为应用与否，可选always|never，第三位该rule的值。具体配置例子如下：</p>
<pre><code>module.exports = {
  extends: [
    '@commitlint/config-conventional',
  ],
  rules: {
    'type-enum': [2, 'always', [
      'build', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'style', 'revert',
    ]],
    'type-case': [0],
    'type-empty': [0],
    'scope-empty': [0],
    'scope-case': [0],
    'subject-full-stop': [0, 'never'],
    'subject-case': [0, 'never'],
    'header-max-length': [0, 'always', 72],
  },
}
</code></pre>
<p>参考文章：</p>
<ul>
<li>https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#husky</li>
<li><a href="https://segmentfault.com/a/1190000017790694">前端代码风格自动化系列（二）之Commitlint - 个人文章 - SegmentFault 思否</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim 操作汇总]]></title>
        <id>https://igrowp.github.io/post/vim-cao-zuo-hui-zong</id>
        <link href="https://igrowp.github.io/post/vim-cao-zuo-hui-zong">
        </link>
        <updated>2019-12-17T10:49:23.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://igrowp.github.io/post-images/1576579799320.jpg" alt="vim"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[linux命令] 文件内容查看]]></title>
        <id>https://igrowp.github.io/post/linux-ming-ling-wen-jian-nei-rong-cha-kan</id>
        <link href="https://igrowp.github.io/post/linux-ming-ling-wen-jian-nei-rong-cha-kan">
        </link>
        <updated>2019-12-17T10:05:35.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>cat:  由第一行开始显示文件内容</li>
<li>tac:  由最后一行开始显示，（cat的倒写）</li>
<li>nl: 显示的时候，顺道输出行号</li>
<li>more: 一页一页的现实文件内容</li>
<li>less: 与more类似，但是比more更好的是，他可以往前翻页</li>
<li>head: 只看头几行</li>
<li>tail: 只看末尾几行</li>
</ul>
<blockquote>
<p>可以使用man [命令] 来查看各个命令的使用文档， 如： man cp</p>
</blockquote>
<h2 id="cat">cat</h2>
<p>由第一行开始显示文件内容</p>
<p>语法：</p>
<pre><code>cat [-AbEnTv]
</code></pre>
<p>选项与参数<br>
* -A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；<br>
* -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！<br>
* -E ：将结尾的断行字节 $ 显示出来；<br>
* -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；<br>
* -T ：将 [tab] 按键以 ^I 显示出来；<br>
* -v ：列出一些看不出来的特殊字符</p>
<h2 id="tac">tac</h2>
<p>与cat 相反， 文件内容从最后一行开始显示</p>
<h2 id="nl">nl</h2>
<p>显示行好<br>
* -b ：指定行号指定的方式，主要有两种：<br>
-b a ：表示不论是否为空行，也同样列出行号 (类似 cat -n)；<br>
-b t ：如果有空行，空的那一行不要列出行号 (默认值)；<br>
* -n ：列出行号表示的方法，主要有三种：<br>
-n ln ：行号在荧幕的最左方显示；<br>
-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>
-n rz ：行号在自己栏位的最右方显示，且加 0 ；<br>
* -w ：行号栏位的占用的位数。</p>
<h2 id="more">more</h2>
<p>一页一页翻动</p>
<pre><code>* 空白键 (space)：代表向下翻一页；
* Enter         ：代表向下翻『一行』；
* / 字串         ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；
* :f            ：立刻显示出档名以及目前显示的行数；
* q             ：代表立刻离开 more ，不再显示该文件内容。
* b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。
</code></pre>
<h2 id="less">less</h2>
<p>一页一页翻动</p>
<h2 id="head">head</h2>
<pre><code>head [-n number] 文件
</code></pre>
<blockquote>
<p>选项与参数：<br>
- -n: 后面接数字，代表显示几行</p>
</blockquote>
<h2 id="tail">tail</h2>
<p>取出文件后面几行</p>
<pre><code>tail [-n number] 文件
</code></pre>
<blockquote>
<p>选项与参数：<br>
- -n: 后面接数字，代表显示几行的意思<br>
- -f: 表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束侦测</p>
</blockquote>
]]></content>
    </entry>
</feed>